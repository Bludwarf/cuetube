// Generated by CoffeeScript 1.12.6

/* Pour avoir des property js. Src: https://stackoverflow.com/a/11592890/1655155 */
var Disc;

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

Function.prototype.propertiesOf = function(targetName, props) {
  var _class, i, len, prop, results;
  results = [];
  for (i = 0, len = props.length; i < len; i++) {
    prop = props[i];
    _class = this;
    results.push((function(prop) {
      return _class.property(prop, {
        get: function() {
          return this[targetName][prop];
        },
        set: function(value) {
          return this[targetName][prop] = value;
        }
      });
    })(prop));
  }
  return results;
};

Disc = (function() {
  function Disc(cuesheet1) {
    var cueFile, i, len, ref;
    this.cuesheet = cuesheet1;
    if (!this.cuesheet) {
      this.cuesheet = new cuesheet.CueSheet();
    }
    this.files = [];
    if (this.cuesheet.files) {
      ref = this.cuesheet.files;
      for (i = 0, len = ref.length; i < len; i++) {
        cueFile = ref[i];
        this.files.push(new Disc.File(cueFile));
      }
    }
    this.index = null;
    this.enabled = true;
  }

  Disc.propertiesOf('cuesheet', ['title', 'performer']);

  Disc.property('id', {
    get: function() {
      return this.videoId;
    }
  });

  Disc.property('videoId', {
    get: function() {
      if (!this.files || !this.files.length) {
        return;
      }
      return this.files[0].videoId;
    }
  });

  Disc.property('tracks', {
    get: function() {
      var tracks;
      tracks = [];
      if (this.files) {
        this.files.forEach(function(file) {
          return tracks = tracks.concat(file.tracks);
        });
      }
      return tracks;
    }
  });

  Disc.property('playable', {
    get: function() {
      if (!this.enabled) {
        false;
      }
      return _.some(this.tracks, function(track) {
        return track.enabled;
      });
    }
  });

  return Disc;

})();

Disc.File = (function() {
  function File(cuesheetFile) {
    var cueTrack, i, len, ref;
    this.cuesheetFile = cuesheetFile;
    if (!this.cuesheetFile) {
      this.cuesheetFile = new cuesheet.File();
    }
    this.tracks = [];
    if (this.cuesheetFile.tracks) {
      ref = this.cuesheetFile.tracks;
      for (i = 0, len = ref.length; i < len; i++) {
        cueTrack = ref[i];
        this.tracks.push(new Disc.Track(cueTrack));
      }
    }
  }

  File.DEFAULT_TYPE = "MP3";

  File.propertiesOf('cuesheetFile', ['name', 'type']);

  return File;

})();

Disc.Track = (function() {
  function Track(cuesheetTrack) {
    this.cuesheetTrack = cuesheetTrack;
    if (!this.cuesheetTrack) {
      this.cuesheetTrack = new cuesheet.Track(void 0, Disc.File.DEFAULT_TYPE);
    }
    this.enabled = true;
  }

  Track.propertiesOf('cuesheetTrack', ['number', 'title', 'indexes']);

  return Track;

})();

//# sourceMappingURL=disc.js.map
